import React, { useEffect, useState } from 'react';
import fileSystem from '../utils/fileSystem';
import '../styles/ContentBox.css';

const ContentBox = ({ language, server, tabs, activeTab, onTabChange, onTabClose, onExecute, currentPath, onPathChange }) => {
  const [localPath, setLocalPath] = useState(currentPath);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—É—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–≤–Ω–µ
  useEffect(() => {
    setLocalPath(currentPath);
  }, [currentPath]);
  useEffect(() => {
    setLocalPath('/');
  }, [server?.ip]);
  
  return (
    <div className="content-box">
      <div className="run-tabs">
        <div 
          className={`run-tab ${activeTab === 0 ? 'active' : ''}`}
          onClick={() => onTabChange(0)}
        >
          <span className="tab-title">üè†</span>
        </div>
        
        {tabs.map((tab, index) => (
          <div
            key={index}
            className={`run-tab ${activeTab === index + 1 ? 'active' : ''}`}
            onClick={() => onTabChange(index + 1)}
          >
            <span className="tab-title">{tab.title}</span>
            <span
              className="tab-close"
              onClick={(e) => {
                e.stopPropagation();
                onTabClose(index + 1);
              }}
            >
              √ó
            </span>
          </div>
        ))}
      </div>
      
      <div className="content-container">
        {renderContent()}
      </div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  function renderContent() {
    // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ 0, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–º–∞—à–Ω—é—é (–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤)
    if (activeTab === 0) {
      return <FileBrowser 
        server={server} 
        language={language} 
        onExecute={onExecute} 
        currentPath={localPath}
        onPathChange={onPathChange}
      />;
    }
    
    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏
    const tab = tabs[activeTab - 1];
    if (!tab) return null;
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (tab.type) {
      case 'pdf':
        const pdfUrl = tab.content.substring(4); // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ 'pdf:'
        return (
          <div className="content-pdf">
            <iframe
              src={`/pdfs/${pdfUrl}`}
              title={tab.title}
              width="100%"
              height="100%"
            />
          </div>
        );
      case 'image':
        const imageUrl = tab.content.substring(6); // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ 'image:'
        return (
          <div className="content-image">
            <img src={`/images/${imageUrl}`} alt={tab.title} />
          </div>
        );
      case 'timeline':
        const timelineId = tab.content.substring(9); // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ 'timeline:'
        return <TimelineViewer id={timelineId} language={language} />;
      default:
        return (
          <div className="content-text">
            <pre>{tab.content}</pre>
          </div>
        );
    }
  }
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
const FileBrowser = ({ server, language, onExecute, currentPath, onPathChange }) => {
  const [innerPath, setInnerPath] = useState(currentPath);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—É—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ
  useEffect(() => {
    setInnerPath(currentPath);
  }, [currentPath]);
  
  if (!server) {
    return (
      <div className="no-server">
        <h2>{language === 'ru' ? '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É' : 'Not connected to any server'}</h2>
        <p>{language === 'ru' ? '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "connect" –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' : 'Use the "connect" command to connect to a server'}</p>
      </div>
    );
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const result = fileSystem.getCurrentDirectoryContentForPath(innerPath);
  
  if (!result.success) {
    return (
      <div className="directory-error">
        <p>{result.message}</p>
      </div>
    );
  }
  
  const { directories, files } = result.content;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const handleDirectoryClick = (dir) => {
    let newPath = innerPath === '/' ? `/${dir}` : `${innerPath}/${dir}`;
    setInnerPath(newPath);
    if (onPathChange) {
      onPathChange(newPath);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ñ–∞–π–ª—É
  const handleFileClick = (file) => {
    const filePath = innerPath === '/' ? `/${file}` : `${innerPath}/${file}`;
    const fileResult = fileSystem.getFileContent(filePath);
    
    if (fileResult.success) {
      const fileObject = {
        title: file,
        content: fileResult.content,
        type: fileResult.type,
      };
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–≥–∏–Ω—ã –≤ –Ω–µ–º
      if (fileResult.type === 'text') {
        // Import commandProcessor to process login credentials
        import('../utils/commandProcessor').then(module => {
          const commandProcessor = module.default;
          const content = fileResult.content.replace(/\\n/g, '\r\n');
          commandProcessor.processLoginInfo(content);
        });
      }
      
      onExecute(fileObject);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
  const handleGoUp = () => {
    if (innerPath === '/') return;
    
    const pathParts = innerPath.split('/').filter(Boolean);
    pathParts.pop();
    const newPath = pathParts.length === 0 ? '/' : `/${pathParts.join('/')}`;
    setInnerPath(newPath);
    if (onPathChange) {
      onPathChange(newPath);
    }
  };
  
  return (
    <div className="home-browser">
      <div className="directory-path">
        {innerPath}
      </div>
      
      <ul className="directory-list">
        {innerPath !== '/' && (
          <li 
            className="directory-item directory-item-folder" 
            onClick={handleGoUp}
          >
            <span className="directory-item-icon">‚¨ÜÔ∏è</span>
            <span>..</span>
          </li>
        )}
        
        {directories.map(dir => (
          <li 
            key={dir} 
            className="directory-item directory-item-folder"
            onClick={() => handleDirectoryClick(dir)}
          >
            <span className="directory-item-icon">üìÅ</span>
            <span>{dir}</span>
          </li>
        ))}
        
        {files.map(file => (
          <li 
            key={file} 
            className="directory-item directory-item-file"
            onClick={() => handleFileClick(file)}
          >
            <span className="directory-item-icon">üìÑ</span>
            <span>{file}</span>
          </li>
        ))}
        
        {directories.length === 0 && files.length === 0 && (
          <li className="directory-item-empty">
            {language === 'ru' ? '–ü—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è' : 'Empty directory'}
          </li>
        )}
      </ul>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
const TimelineViewer = ({ id, language }) => {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –∑–∞–≥—Ä—É–∂–∞–ª–æ –±—ã –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –∏–∑ –±—ç–∫–µ–Ω–¥–∞
  // –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const timelineData = {
    career_timeline: {
      en: [
        { year: 2018, month: 1, title: 'Started career', description: 'First job as a junior developer' },
        { year: 2019, month: 6, title: 'Promotion', description: 'Promoted to mid-level developer' },
        { year: 2020, month: 3, title: 'New project', description: 'Started working on a major project' },
        { year: 2021, month: 9, title: 'Senior position', description: 'Promoted to senior developer' },
        { year: 2022, month: 5, title: 'Leadership', description: 'Became team lead' },
        { year: 2023, month: 2, title: 'Architecture', description: 'Transitioned to solution architect role' },
      ],
      ru: [
        { year: 2018, month: 1, title: '–ù–∞—á–∞–ª–æ –∫–∞—Ä—å–µ—Ä—ã', description: '–ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–ª–∞–¥—à–µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞' },
        { year: 2019, month: 6, title: '–ü–æ–≤—ã—à–µ–Ω–∏–µ', description: '–ü–æ–≤—ã—à–µ–Ω –¥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è' },
        { year: 2020, month: 3, title: '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç', description: '–ù–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫—Ä—É–ø–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º' },
        { year: 2021, month: 9, title: '–°—Ç–∞—Ä—à–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å', description: '–ü–æ–≤—ã—à–µ–Ω –¥–æ —Å—Ç–∞—Ä—à–µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞' },
        { year: 2022, month: 5, title: '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', description: '–°—Ç–∞–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã' },
        { year: 2023, month: 2, title: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', description: '–ü–µ—Ä–µ—à–µ–ª –Ω–∞ —Ä–æ–ª—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏–π' },
      ],
    },
    certificates: {
      en: [
        { year: 2018, month: 3, title: 'Web Development', description: 'Certificate in Web Development Fundamentals' },
        { year: 2019, month: 1, title: 'JavaScript', description: 'Advanced JavaScript Programming' },
        { year: 2020, month: 8, title: 'React', description: 'React and Redux Certification' },
        { year: 2021, month: 5, title: 'Cloud', description: 'AWS Certified Solutions Architect' },
        { year: 2022, month: 11, title: 'DevOps', description: 'DevOps Engineering Certificate' },
      ],
      ru: [
        { year: 2018, month: 3, title: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', description: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –æ—Å–Ω–æ–≤–∞–º –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏' },
        { year: 2019, month: 1, title: 'JavaScript', description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ JavaScript' },
        { year: 2020, month: 8, title: 'React', description: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ React –∏ Redux' },
        { year: 2021, month: 5, title: '–û–±–ª–∞–∫–æ', description: 'AWS Certified Solutions Architect' },
        { year: 2022, month: 11, title: 'DevOps', description: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞ DevOps' },
      ],
    },
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID –∏ —è–∑—ã–∫–∞
  const data = timelineData[id] ? timelineData[id][language] || timelineData[id].en : [];
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥–∞–º
  const yearGroups = data.reduce((groups, item) => {
    const year = item.year;
    if (!groups[year]) {
      groups[year] = [];
    }
    groups[year].push(item);
    return groups;
  }, {});

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
  const [selectedYear, setSelectedYear] = useState(data.length > 0 ? data[0].year : null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≥–æ–¥—É
  const handleYearClick = (year) => {
    setSelectedYear(selectedYear === year ? null : year);
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–µ—Å—è—Ü–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
  const getMonthName = (month, lang) => {
    const date = new Date(2000, month - 1, 1);
    const monthName = date.toLocaleDateString(lang === 'ru' ? 'ru-RU' : 'en-US', {
      month: 'long',
    });
    return monthName.toUpperCase();
  };

  return (
    <div className="timeline-viewer">
      <div className="timeline">
        {Object.keys(yearGroups).map(year => (
          <div
            key={year}
            className={`timeline-year ${selectedYear === parseInt(year) ? 'active' : ''}`}
            onClick={() => handleYearClick(parseInt(year))}
          >
            {year}
          </div>
        ))}
      </div>
      
      {selectedYear && (
        <div className="timeline-details">
          <h2>{selectedYear}</h2>
          <div className="timeline-months">
            {yearGroups[selectedYear].map((item, index) => (
              <div key={index} className="timeline-event">
                <div className="timeline-event-date">
                  {getMonthName(item.month, language)}
                </div>
                <div className="timeline-event-content">
                  <h3>{item.title}</h3>
                  <p>{item.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ContentBox;
