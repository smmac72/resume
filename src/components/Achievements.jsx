import React, { useState, useEffect } from 'react';
import commandProcessor from '../utils/commandProcessor';

const Achievements = ({ language }) => {
  const achievements = commandProcessor.getAchievements();
  const totalAchievements = commandProcessor.availableAchievements.length;
  const [showUnlockAnimation, setShowUnlockAnimation] = useState(false);
  
  // Check if achievements were just unlocked
  useEffect(() => {
    if (commandProcessor.achievementsUnlocked && achievements.length > 0) {
      setShowUnlockAnimation(true);
      
      // Reset the flag
      commandProcessor.achievementsUnlocked = false;
      
      // Show animation for 3 seconds
      const timer = setTimeout(() => {
        setShowUnlockAnimation(false);
      }, 3000);
      
      return () => clearTimeout(timer);
    }
  }, [achievements.length]);
  
  // Define achievement details
  const achievementDetails = {
    server_connection: {
      en: 'Connected to server',
      ru: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É',
      icon: 'üñ•Ô∏è',
      desc: {
        en: 'Successfully connected to a server',
        ru: '–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É'
      }
    },
    first_login: {
      en: 'Authenticated to server',
      ru: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
      icon: 'üîê',
      desc: {
        en: 'Successfully logged in to a server',
        ru: '–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä'
      }
    },
    logins_found: {
      en: 'Found credentials',
      ru: '–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ',
      icon: 'üìú',
      desc: {
        en: 'Found login credentials in a file',
        ru: '–ù–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ'
      }
    },
    secret_server_access: {
      en: 'Secret server',
      ru: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä',
      icon: 'üîí',
      desc: {
        en: 'Accessed a protected server',
        ru: '–ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É'
      }
    },
    file_executed: {
      en: 'Executed file',
      ru: '–í—ã–ø–æ–ª–Ω–µ–Ω —Ñ–∞–π–ª',
      icon: 'üìÇ',
      desc: {
        en: 'Executed a file using run command',
        ru: '–í—ã–ø–æ–ª–Ω–µ–Ω —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã run'
      }
    },
    timeline_opened: {
      en: 'Timeline',
      ru: '–¢–∞–π–º–ª–∞–π–Ω',
      icon: 'üìÖ',
      desc: {
        en: 'Opened a timeline file',
        ru: '–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª —Ç–∞–π–º–ª–∞–π–Ω–∞'
      }
    },
    image_opened: {
      en: 'Image viewed',
      ru: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      icon: 'üñºÔ∏è',
      desc: {
        en: 'Opened an image file',
        ru: '–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      }
    },
    link_opened: {
      en: 'Link opened',
      ru: '–û—Ç–∫—Ä—ã—Ç–∞ —Å—Å—ã–ª–∫–∞',
      icon: 'üîó',
      desc: {
        en: 'Opened a web link',
        ru: '–û—Ç–∫—Ä—ã—Ç–∞ –≤–µ–±-—Å—Å—ã–ª–∫–∞'
      }
    },
    language_changed: {
      en: 'Language',
      ru: '–Ø–∑—ã–∫',
      icon: 'üåê',
      desc: {
        en: 'Changed the interface language',
        ru: '–ò–∑–º–µ–Ω–µ–Ω —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞'
      }
    },
    music_played: {
      en: 'Music',
      ru: '–ú—É–∑—ã–∫–∞',
      icon: 'üéµ',
      desc: {
        en: 'Played background music',
        ru: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞'
      }
    },
  };
  
  // Create a grid of achievements - filled and empty placeholders
  const renderAchievementGrid = () => {
    const achievementTypes = commandProcessor.availableAchievements;
    const rows = Math.ceil(achievementTypes.length / 5);
    
    const grid = [];
    for (let i = 0; i < rows; i++) {
      const rowItems = [];
      for (let j = 0; j < 5; j++) {
        const index = i * 5 + j;
        if (index < achievementTypes.length) {
          const type = achievementTypes[index];
          const achieved = achievements.some(a => a.type === type);
          const details = achievementDetails[type] || {
            en: type,
            ru: type,
            icon: 'üèÜ',
            desc: {
              en: 'Achievement unlocked',
              ru: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'
            }
          };
          
          rowItems.push(
            <div 
              key={type} 
              className={`achievement-icon-container ${achieved ? 'achieved' : 'locked'}`}
            >
              <div className="achievement-icon">{details.icon}</div>
              <div className="achievement-tooltip">{details.desc[language] || details.desc.en}</div>
            </div>
          );
        }
      }
      grid.push(<div key={`row-${i}`} className="achievement-row">{rowItems}</div>);
    }
    
    return grid;
  };
  
  // If no achievements, show locked message
  if (achievements.length === 0) {
    return (
      <>
        <div className="achievements-header-line">
          {language === 'ru' ? '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' : 'Achievements'}: 0/{totalAchievements}
        </div>
        <div className="achievements-locked">
          {language === 'ru' ? '–î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´' : 'ACHIEVEMENTS LOCKED'}
        </div>
      </>
    );
  }
  
  // If showing unlock animation
  if (showUnlockAnimation) {
    return (
      <>
        <div className="achievements-header-line">
          {language === 'ru' ? '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' : 'Achievements'}: {achievements.length}/{totalAchievements}
        </div>
        <div className="achievements-unlocked-animation">
          {language === 'ru' ? '–î–û–°–¢–ò–ñ–ï–ù–ò–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–´' : 'ACHIEVEMENTS UNLOCKED'}
        </div>
      </>
    );
  }
  
  // Normal view with achievements
  return (
    <>
      <div className="achievements-header-line">
        {language === 'ru' ? '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' : 'Achievements'}: {achievements.length}/{totalAchievements}
      </div>
      <div className="achievements-grid">
        {renderAchievementGrid()}
      </div>
    </>
  );
};

export default Achievements;
