import React, { useState, useEffect } from 'react';
import commandProcessor from '../utils/commandProcessor';

const Achievements = ({ language }) => {
  const achievements = commandProcessor.getAchievements();
  const totalAchievements = 8; // –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å 8 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const [showUnlockAnimation, setShowUnlockAnimation] = useState(false);
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const allAchievements = [
    {
      type: 'any_file',
      icon: 'üìÑ',
      title: {
        en: 'File Explorer',
        ru: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Ñ–∞–π–ª–æ–≤'
      },
      description: {
        en: 'Opened any file',
        ru: '–û—Ç–∫—Ä—ã–ª –ª—é–±–æ–π —Ñ–∞–π–ª'
      }
    },
    {
      type: 'image_opened',
      icon: 'üñºÔ∏è',
      title: {
        en: 'Image Viewer',
        ru: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
      },
      description: {
        en: 'Opened an image',
        ru: '–û—Ç–∫—Ä—ã–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
      }
    },
    {
      type: 'link_opened',
      icon: 'üåê',
      title: {
        en: 'Web Explorer',
        ru: '–í–µ–±-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å'
      },
      description: {
        en: 'Opened a website',
        ru: '–û—Ç–∫—Ä—ã–ª —Å–∞–π—Ç'
      }
    },
    {
      type: 'timeline_opened',
      icon: 'üìÖ',
      title: {
        en: 'Time Traveler',
        ru: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏'
      },
      description: {
        en: 'Opened a timeline',
        ru: '–û—Ç–∫—Ä—ã–ª –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É'
      }
    },
    {
      type: 'music_played',
      icon: 'üéµ',
      title: {
        en: 'DJ Mode',
        ru: '–†–µ–∂–∏–º DJ'
      },
      description: {
        en: 'Played background music',
        ru: '–í–∫–ª—é—á–∏–ª —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É'
      }
    },
    {
      type: 'language_changed',
      icon: 'üåç',
      title: {
        en: 'Polyglot',
        ru: '–ü–æ–ª–∏–≥–ª–æ—Ç'
      },
      description: {
        en: 'Changed interface language',
        ru: '–°–º–µ–Ω–∏–ª —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞'
      }
    },
    {
      type: 'logins_found',
      icon: 'üîë',
      title: {
        en: 'Credentials Hunter',
        ru: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —É—á–µ—Ç–∫–∞–º–∏'
      },
      description: {
        en: 'Found login:password',
        ru: '–ù–∞—à–µ–ª –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å'
      }
    },
    {
      type: 'secret_server_access',
      icon: 'üïµÔ∏è',
      title: {
        en: 'Secret Access',
        ru: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø'
      },
      description: {
        en: 'Connected to server 31.31.196.69',
        ru: '–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É 31.31.196.69'
      }
    }
  ];
  
  // Check if achievements were just unlocked
  useEffect(() => {
    if (commandProcessor.achievementsUnlocked && achievements.length > 0) {
      setShowUnlockAnimation(true);
      
      // Reset the flag
      commandProcessor.achievementsUnlocked = false;
      
      // Show animation for 3 seconds
      const timer = setTimeout(() => {
        setShowUnlockAnimation(false);
      }, 3000);
      
      return () => clearTimeout(timer);
    }
  }, [achievements.length]);
  
  // –†–µ–Ω–¥–µ—Ä —Å–µ—Ç–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const renderAchievementGrid = () => {
    return (
      <div className="achievements-grid">
        {allAchievements.map((achievement, index) => {
          const achieved = achievements.some(a => a.type === achievement.type);
          
          return (
            <div 
              key={achievement.type} 
              className={`achievement-icon-container ${achieved ? 'achieved' : 'locked'}`}
            >
              <div className="achievement-icon">{achievement.icon}</div>
              <div className="achievement-tooltip">
                <div className="achievement-tooltip-title">
                  {achievement.title[language] || achievement.title.en}
                </div>
                <div className="achievement-tooltip-desc">
                  {achievement.description[language] || achievement.description.en}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    );
  };
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (achievements.length === 0) {
    return (
      <>
        <div className="achievements-header-line">
          {language === 'ru' ? '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' : 'Achievements'}: 0/{totalAchievements}
        </div>
        <div className="achievements-locked">
          {language === 'ru' ? '–î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´' : 'ACHIEVEMENTS LOCKED'}
        </div>
      </>
    );
  }
  
  // –ï—Å–ª–∏ –∏–¥–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  if (showUnlockAnimation) {
    return (
      <>
        <div className="achievements-header-line">
          {language === 'ru' ? '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' : 'Achievements'}: {achievements.length}/{totalAchievements}
        </div>
        <div className="achievements-unlocked-animation">
          {language === 'ru' ? '–î–û–°–¢–ò–ñ–ï–ù–ò–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–´' : 'ACHIEVEMENTS UNLOCKED'}
        </div>
      </>
    );
  }
  
  // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
  return (
    <>
      <div className="achievements-header-line">
        {language === 'ru' ? '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' : 'Achievements'}: {achievements.length}/{totalAchievements}
      </div>
      {renderAchievementGrid()}
    </>
  );
};

export default Achievements;